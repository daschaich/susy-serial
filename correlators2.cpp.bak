#include "correlators2.h"

void correlators2(const Gauge_Field &U){
Lattice_Vector x,y,z;
int a,b,sites,pt,j,i,t; 
double dum;
Gauge_Field B;

Complex X[SITES][NUMLINK][NUMLINK], K[SITES];
Complex XS[T][NUMLINK][NUMLINK],KS[T];
Complex GK[T], GS[T],GX[T][NUMLINK][NUMLINK];
static int first_time=1;
static ofstream f_SUGRA,f_K;

if(first_time==1){

f_SUGRA.open("corrSUGRA",ios::app);
if(f_SUGRA.bad()){
cerr << "failed to open corrSUGRA file" << "\n";exit(1);}

f_K.open("corrK",ios::app);
if(f_K.bad()){
cerr << "failed to open corrK file" << endl;}

first_time=0;
}

//computing SUGRA and Konishi operators///
//////////////////////////////////////////


sites=0;
dum=0.0;
while(loop_over_lattice(x,sites)){
for(a=0;a<NUMLINK;a++){
dum=dum+Tr(Adj(U.get(x,a))*U.get(x,a)).real();}
}
dum/=(SITES*NUMLINK*NCOLOR);


sites=0;
while(loop_over_lattice(x,sites)){
for(a=0;a<NUMLINK;a++){
B.set(x,a,(U.get(x,a)*Adj(U.get(x,a)))-dum*Umatrix(1));
}}


sites=0;
while(loop_over_lattice(x,sites)){ 
pt=lat_pack(x);

for(a=0;a<NUMLINK;a++){
for(b=0;b<NUMLINK;b++){
X[pt][a][b]=Tr(B.get(x,a)*B.get(x,b));
}}
}


for(pt=0;pt<SITES;pt++){
K[pt]=Complex();
for(a=0;a<NUMLINK;a++){
K[pt]=K[pt]+X[pt][a][a];
}}

for(pt=0;pt<SITES;pt++){
for(a=0;a<NUMLINK;a++){
X[pt][a][a]=X[pt][a][a]-(1.0/NUMLINK)*K[pt];}
}

// first timesliced averaged correlators 

for(t=0;t<T;t++){
for(a=0;a<NUMLINK;a++){
for(b=0;b<NUMLINK;b++){
XS[t][a][b]=Complex();
}}
KS[t]=Complex();
}

for(sites=0;sites<SITES;sites++){
lat_unpack(sites,x);
t=x.get(D-1);

for(a=0;a<NUMLINK;a++){
for(b=0;b<NUMLINK;b++){
XS[t][a][b]=XS[t][a][b]+(1.0/(LX*LX*LX))*X[sites][a][b];}}

KS[t]=KS[t]+(1.0/(LX*LX*LX))*K[sites];
}

// compute timeslice correlator
for(t=0;t<T;t++){
GK[t]=Complex();
for(a=0;a<NUMLINK;a++){
for(b=0;b<NUMLINK;b++){
GX[t][a][b]=Complex();
}}
}

for(sites=0;sites<T;sites++){
for(pt=0;pt<T;pt++){
t=((sites-pt)+T)%T;

for(a=0;a<NUMLINK;a++){
for(b=0;b<NUMLINK;b++){
GX[t][a][b]=GX[t][a][b]+XS[sites][a][b]*XS[pt][a][b];
}}

GK[t]=GK[t]+KS[sites]*KS[pt];
}
}

// average the SUGRA correlators
for(t=0;t<T;t++){
GS[t]=Complex();
for(a=0;a<NUMLINK;a++){
for(b=0;b<NUMLINK;b++){
GS[t]=GS[t]+GX[t][a][b];}}
GS[t]=(1.0/double(NUMLINK*NUMLINK*T))*GS[t];
GK[t]=GK[t]*(1.0/double(T));
}

for(t=0;t<T;t++){
f_K << t << "\t" << GK[t] << endl;

f_SUGRA << t << "\t" << GS[t] << endl;
}


return;
}


//function for |r|
double distR(double x[], double y[] ){  
double r=0.0;
int i;
for(i=0;i<D;i++){
r+=(x[i]-y[i])*(x[i]-y[i]);}

r=sqrt(r);
return(r);
}



//function to compute the check for uniqueness for r
int check(double d[],double r, int &total){

int i,id;
int found=0;

// now check if in fact distance r has been seen before
for(i=0;i<total;i++){
if(fabs(d[i]-r)<0.000001){
// if so return old index of this distance in array d[]
id=i;
found=1;
}
if(found) break;
}

// otherwise new distance - add to d[] and increment total
if(!found){
id=total;
d[total]=r;
total++;}

return(id);

}

